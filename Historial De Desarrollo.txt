Introduccion

Crearemos un backend del tipo Hibrido, el cual soportara API (Token) y WEB (Session).
En cuanto al backend existen 3 opciones:

https://stackoverflow.com/questions/48240582/vue-js-best-way-to-implement-mpamulti-page-app-in-laravel

1) SPA Api/Session
    Use Laravel to render the "main view" + connect vue.js application.
    Basically laravel will render the Vue application and every request goes throught an API.

    a) Easy to setup
    b) Authentication + user validation is easier (you can use laravel session manager for that - don't need to build/use
    tokens or whatever. "No need to worry about your application state".)
    c) Easy to "disconnect" from Laravel - if you choose in the future to decouple the SPA application.

2) SPA Api/Token

    Use laravel (or lumen) only as an API, and on another server render a SPA.
    This can take more time, since you'll need to setup an extra server, prepare cross-origin, etc.

    a) Also easy to setup, but can take more time than option #1
    b) You'll need to create something for user validation/state management, etc.
    c) Easy to place into laravel, if you decide in the future to use "only one app".
    d) Can be easier to maintain/scale (if you have a frontend team, they don't need to worry about laravel - same
    for your "laravel team", they "won't need to worry" about the frontend)

3) MPA

    You can use Laravel to render all views + vuejs for components/elements in the page.

    a) Easy to setup. You have laravel + vuejs, and they are already prepared to be used together.
    https://laravel.com/docs/5.5/frontend#writing-vue-components
    b) Not so easy to decouple. In this case you'll need to create the same views for vue.js. This can take time.
    c) This is the "traditional web development" (in my opinion). If I had to start a project like this today,
    I wouldn't create all pages in Vue.js + something in Laravel (Controller + new route) to render this view.
    If you do this (again - my opinion), it's just extra work. If you are worried about SEO, there are "fallbacks"/extra options.



-----------------------------------------------------------------------------------------------------------
1) creacion base del proyecto

    - Creacion de proyecto Laravel 6 mediante Laragon
    - Configurar Base de Datos en el archivo .env

Corremos las migraciones:
    - php artisan migrate

*A partir de Laravel 6 no decidirá por ti con cuál pre-procesador y framework de Javascript y CSS trabajar
en tu aplicación. Es por ello que fue movida toda la funcionalidad para el frontend (scaffolding) que
venía por defecto (Bootstrap y Vue) en el framework a un nuevo paquete Composer oficial llamado laravel/ui

    - composer require laravel/ui --dev
    - php artisan ui bootstrap
    - php artisan ui vue
    - php artisan ui:auth

Crearemos un nuevo archivo js en nuestro resources/js llamado "main.js", ya que usaremos otra forma de
rederizar Vue.js
*Recordar cambiar el archivo webpack.mix.js para cambiar el app.js por main.js

Agregaremos el router de Vue:
    - npm install vue-router

Luego, instalamos los demas paquetes NPM con:
    - npm install

A través de las instrucciones del archivo webpack.mix.js Webpack compilará tanto
los archivos Sass para convertirlos a CSS plano así como el archivo resources/js/main.js,
al ejecutar:
    - npm run dev

-----------------------------------------------------------------------------------------------------------
2) Vue-Router (creacion de directorios y archivos basicos)

    - Iremos a la carpeta resources/js y crearemos la carpeta "router" y dentro de router crearemos
    dos archivos: "index.js" y "routes.js".
        - index.js: Tendra la configuracion y parametros de nuestro router. Una vez configurado, ya
        no debiese modificarse mas.
        - routes.js: Tendra unicamente las rutas de nuestra SPA, por lo que tendremos que modificarlo
        activamente conforme agregemos componentes.

    - Agregaremos el router al main.js (el cual contiene el componente principal del programa)

3) Vuex (creacion de archivos y directorios basicos)

    npm install vuex --save

-----------------------------------------------------------------------------------------------------------
4) creacion de los modelos

- Tarea:

Modelo y migracion:
    - php artisan make:model Task --migration

Se modifica la migracion agregando los atributos de Tarea y su relacion con User en el modelo.

Una vez modificado la migracion:
    - php artisan migrate:fresh

-----------------------------------------------------------------------------------------------------------
5) Seeder para pruebas

    - php artisan make:factory TaskFactory
    - php artisan make:seeder UsersTableSeeder
    - php artisan make:seeder TasksTableSeeder

*UserFactory esta creado por defecto

-----------------------------------------------------------------------------------------------------------
6) Repositories

    - Crearemos la carpeta "Repositories" dentro de "app"

    - Crearemos el archivo "RepositoryInterface", la cual sera una interface principal
    - Crearemos el archivo "TaskRepositoryInterface", sera un intermediario solo en caso que queramos agregar
        funciones propias del repositorio. Sera una interface que extiende de la otra interface
    - Crearemos el archivo "TaskRepository". Clase que implementa la interface de Task

    - Finalmente debemos registrar nuestra interface a la implementacion en nuestro "AppServiceProvider":

        public function register()
        {
            $this->app->bind(
                'App\Repositories\TaskRepositoryInterface',
                'App\Repositories\TaskRepository'
            );
        }

-----------------------------------------------------------------------------------------------------------
7) Controllers

    - php artisan make:controller TaskController --resource

Modificaremos el controller para agregar el repositorio (inyecccion)

-----------------------------------------------------------------------------------------------------------
8) Rutas

    - Para la creacion de un proyecto hibrido (SPA con Sesiones), las rutas seran mayoritariamente
    por el frontend, por lo que tenemos que asignar una ruta que tome cualquier request y lo redireccione a
    nuestra plantilla principal (que se creara en el paso 12):

        Route::get('{any}', function(){
            return view('index');
        })->where('any','.*');



-----------------------------------------------------------------------------------------------------------
9) Mixins

    - Los mixins son objetos Vue que contienen metodos comunes reutilizables por todos los componentes que lo
    importes, por lo que haremos uno que contenga los metodos necesarios para checkear el login del usuario.

    - Crearemos la carpeta "mixins" en resources/js

-----------------------------------------------------------------------------------------------------------
10) Vistas/Componentes

    - Se crea la carpeta Store


-----------------------------------------------------------------------------------------------------------
11) Services

    - Se crea las carpetas Services


-----------------------------------------------------------------------------------------------------------
12) Alias

    - Modificacion de archivo webpack.mix.js para agregar alias principalmente hacia "components"
    y "services"

-----------------------------------------------------------------------------------------------------------
13) Vistas/Componentes

    - Se crea componente principal de la aplicacion llamado "App.vue" en la ubicacion resources/js/components

    - Se crea la vista "index.blade.php" el cual contiene el componente principal (app.vue) de toda la aplicacion.
    *Considerar que para agregar el css (entre ello el bootstrap) y todo el JS, debemos importarlos mediante laravel
    mix (a fluent API for defining Webpack build steps for your Laravel application using several common CSS and
    JavaScript pre-processors) a nuestra plantilla Blade principal.
    En el caso de css debemos importar dentro del head:
        <link rel="stylesheet" href="{{ mix('css/app.css') }}">
    En el caso del Js debemos importar al final del body:
        <script src="{{ mix('js/main.js') }}"></script>

    -  Se crea las subcarpetas y componentes para el Header (navbar) y el footer
